name: Testing with conda

on:
  push:
    branches:
    - 'main'
    - 'release-*'
  pull_request:
    branches:
      - 'main'
      - 'release-*'
  release:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          # Needed to get tags so that git describe works during package build
          fetch-depth: "0"

      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%V")"
        shell: bash

      - name: Cache Mambaforge and Pip packages
        uses: actions/cache@v2
        env:
          CACHE_NUMBER: 0
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.cache/pip
          key:
            ${{runner.os}}-condapkg-${{env.CACHE_NUMBER}}-${{steps.get-date.outputs.date}}-${{hashFiles('environment-dev.yml','conda/meta.yaml')}}

      - name: Cache Mambaforge environment
        uses: actions/cache@v2
        id: cache-mambaforge-environment
        env:
          CACHE_NUMBER: 0
        with:
          path: /usr/share/miniconda3/envs/mantidimaging-dev.cache
          key:
            ${{runner.os}}-condaenv-${{env.CACHE_NUMBER}}-${{steps.get-date.outputs.date}}-${{hashFiles('environment-dev.yml','conda/meta.yaml')}}

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          miniforge-version: latest
          miniforge-variant: Mambaforge
          activate-environment: mantidimaging-dev
          auto-activate-base: false
          use-mamba: true

      - name: Mantid Imaging developer dependencies
        if: steps.cache-mambaforge-environment.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          conda deactivate
          python3 ./setup.py create_dev_env
          cp -Ta /usr/share/miniconda3/envs/mantidimaging-dev /usr/share/miniconda3/envs/mantidimaging-dev.cache

      - name: Mantid Imaging developer dependencies - from cache
        if: steps.cache-mambaforge-environment.outputs.cache-hit == 'true'
        shell: bash -l {0}
        run: |
          cp -Ta /usr/share/miniconda3/envs/mantidimaging-dev.cache /usr/share/miniconda3/envs/mantidimaging-dev

      - name: Other dependencies
        shell: bash -l {0}
        run: |
          sudo apt update -y
          sudo apt-get install -y xvfb libxcb* libxkb*

      - name: List versions
        shell: bash -l {0}
        run: |
          mamba env list
          python --version; conda list ; pip list

      - name: Yapf
        shell: bash -l {0}
        run: |
          yapf --parallel --diff --recursive .

      - name: Flake8
        shell: bash -l {0}
        run: |
          python -m flake8

      - name: mypy
        shell: bash -l {0}
        # COMPAT: applitools has some bad signatures, so use --no-site-packages
        run: |
          mypy --ignore-missing-imports --no-site-packages mantidimaging

      - name: pytest
        timeout-minutes: 10
        shell: bash -l {0}
        run: |
          xvfb-run --auto-servernum python -m pytest --cov --cov-report=xml -n auto --ignore=mantidimaging/eyes_tests --durations=10

      - name: Get test data
        shell: bash -l {0}
        run: |
          wget -nv https://github.com/mantidproject/mantidimaging-data/archive/refs/tags/small.zip
          unzip -q small.zip -d ~
          mv ~/mantidimaging-data-small ~/mantidimaging-data
        timeout-minutes: 5

      - name: GUI Tests System
        shell: bash -l {0}
        run: |
          xvfb-run --auto-servernum /bin/time -v python -m pytest -vs -rs -p no:xdist -p no:randomly -p no:repeat -p no:cov --run-system-tests --durations=10
        timeout-minutes: 30

      - name: GUI Tests Screenshots Applitools
        if: github.event_name == 'pull_request'
        shell: bash -l {0}
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
          APPLITOOLS_BATCH_ID: ${{ github.sha }}
          GITHUB_BRANCH_NAME: ${{ github.head_ref }}
        run: |
          xvfb-run --auto-servernum /bin/time -v python -m pytest -vs -rs -p no:xdist -p no:randomly -p no:repeat -p no:cov mantidimaging/eyes_tests --durations=10
        timeout-minutes: 15

      - name: Coveralls
        shell: bash -l {0}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          coveralls --service=github

      # Always label as unstable. Builds of stable releases can be manually labeled to 'main' once tested
      - name: publish 'unstable' package
        if: github.event_name == 'release' || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release')))
        uses: ./.github/actions/publish-package
        with:
          label: unstable
          token: ${{ secrets.ANACONDA_API_TOKEN }}
