name: Testing on Windows

on:
  push:
    branches:
    - 'main'
    - 'release-*'
  pull_request:
    branches:
      - 'main'
      - 'release-*'
  release:

jobs:
  test:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
        with:
          # Needed to get tags so that git describe works during package build
          fetch-depth: "0"

      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%V")"
        shell: bash

      - name: Cache Mambaforge and Pip packages
        uses: actions/cache@v2
        env:
          CACHE_NUMBER: 0
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.cache/pip
          key:
            ${{runner.os}}-condapkg-${{env.CACHE_NUMBER}}-${{steps.get-date.outputs.date}}-${{hashFiles('environment-dev.yml','conda/meta.yaml')}}

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          miniforge-version: latest
          miniforge-variant: Mambaforge
          activate-environment: mantidimaging-dev
          auto-activate-base: false
          use-mamba: true

      - name: Cache Mambaforge environment
        uses: actions/cache@v2
        id: cache-mambaforge-environment
        env:
          CACHE_NUMBER: 0
        with:
          path: ${{env.CONDA}}/envs/mantidimaging-dev
          key:
            ${{runner.os}}-condaenv-${{env.CACHE_NUMBER}}-${{steps.get-date.outputs.date}}-${{hashFiles('environment-dev.yml','conda/meta.yaml')}}

      - name: Mantid Imaging developer dependencies
        if: steps.cache-mambaforge-environment.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          conda deactivate
          python ./setup.py create_dev_env

      - name: List versions
        shell: bash -l {0}
        run: |
          mamba env list
          python --version; conda list ; pip list

      - name: Get test data
        shell: bash -l {0}
        run: |
          curl -L https://github.com/mantidproject/mantidimaging-data/archive/refs/tags/small.zip --output small.zip
          unzip -q small.zip -d ~
          mv ~/mantidimaging-data-small ~/mantidimaging-data
        timeout-minutes: 5

      - name: GUI Tests System
        shell: bash -l {0}
        run: |
          python -m pytest -vs -rs -p no:xdist -p no:randomly -p no:repeat -p no:cov --run-system-tests --durations=10 -k test_minimise
        timeout-minutes: 30

      - name: GUI Tests System 2
        shell: bash -l {0}
        run: |
          python -m pytest -vs -rs -p no:xdist -p no:randomly -p no:repeat -p no:cov --run-system-tests --durations=10 -k test_minimise
        timeout-minutes: 30

      - name: GUI Tests System 3
        shell: bash -l {0}
        run: |
          python -m pytest -vs -rs -p no:xdist -p no:randomly -p no:repeat -p no:cov --run-system-tests --durations=10 -k test_minimise
        timeout-minutes: 30

      - name: GUI Tests System 4
        shell: bash -l {0}
        run: |
          python -m pytest -vs -rs -p no:xdist -p no:randomly -p no:repeat -p no:cov --run-system-tests --durations=10 -k test_minimise
        timeout-minutes: 30

      - name: GUI Tests System 5
        shell: bash -l {0}
        run: |
          python -m pytest -vs -rs -p no:xdist -p no:randomly -p no:repeat -p no:cov --run-system-tests --durations=10 -k test_minimise
        timeout-minutes: 30
